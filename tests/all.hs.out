{-# LANGUAGE LambdaCase, UnicodeSyntax, TupleSections #-}

import Data.List as List
import qualified Control.Monad as Monad


import Data.Char 
import qualified Data.String  as String

str1 :: String
str1{-#COLUMN 5#-}= "test1"

str2 :: String
str2{-#COLUMN 4#-}= "test2"

str3 :: String
str3 = str4 where
   str4 :: String
   str4{-#COLUMN 7#-}= "test3"

isPos :: Int -> Bool
isPos{-#COLUMN 5#-}x | x > 0 = True
      | True  = False

isPos' :: Int -> Bool
isPos'{-#COLUMN 5#-}= \case
   x | x > 0 -> True
     | True  -> False

isPosU ∷ Int → Bool
isPosU{-#COLUMN 5#-}= \case
   x | x > 0 → True
     | True  → False

nested :: Int -> Bool
nested{-#COLUMN 5#-}0 = a where
   a :: Bool
   a{-#COLUMN 7#-}= True
nested{-#COLUMN 5#-}_ = b where
   b :: Bool
   b = False

list :: [Int]
list{-#COLUMN 5#-}= [  -- comment
   1,    -- comment
   2
   ]

list' :: [Int]
list'{-#COLUMN 5#-}= [  -- comment
     1   -- comment
   , 2   -- comment
   ]

data TestA1 = TestA1 { -- comment
     field11 :: Bool   -- comment
   , field12 :: ()     -- comment
   }

data TestA2 = TestA2 { -- comment
   field21 :: Bool,    -- comment
   field22 :: ()
   }

data TestB = -- comment
     Test1   -- comment
   | Test2   -- comment

constraint :: (
     Show a
   , Read a
   ) => a -> a
constraint = read . show

slice :: Int -> Int
slice{-#COLUMN 5#-}= fst . (5,)

tabbed :: Int
tabbed{-#COLUMN 5#-}= x where
   x = 1

number :: Double
number = 299792458.123456

