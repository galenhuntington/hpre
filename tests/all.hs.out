{-# LANGUAGE LambdaCase, UnicodeSyntax #-}

import Data.List as List
import qualified Control.Monad as Monad


import Data.Char 
import qualified Data.String  as String

str1 :: String
str1{-#COLUMN 5#-}= "test1"

str2 :: String
str2{-#COLUMN 4#-}= "test2"


isPos :: Int -> Bool
isPos{-#COLUMN 5#-}x | x > 0 = True
      | True  = False

isPos' :: Int -> Bool
isPos'{-#COLUMN 5#-}= \case
   x | x > 0 -> True
     | True  -> False

isPosU ∷ Int → Bool
isPosU{-#COLUMN 5#-}= \case
   x | x > 0 → True
     | True  → False

list :: [Int]
list{-#COLUMN 5#-}= [
   1,
   2
   ]

list' :: [Int]
list'{-#COLUMN 5#-}= [
     1
   , 2
   ]

data Test =
     Test1
   | Test2

tabbed :: Int
tabbed{-#COLUMN 5#-}= x where
   x = 1

number :: Int
number = 299792458.123456

